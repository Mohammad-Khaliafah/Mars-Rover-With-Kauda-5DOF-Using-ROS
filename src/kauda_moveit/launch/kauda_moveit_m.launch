<launch>

    <!-- specify the planning pipeline -->
    <arg name="pipeline" default="ompl" />
  
    <!-- By default, we do not start a database (it can be large) -->
    <arg name="db" default="false" />
    <!-- Allow user to specify database location -->
    <arg name="db_path" default="$(find kauda_moveit)/default_warehouse_mongo_db" />
  
    <!-- By default, we are not in debug mode -->
    <arg name="debug" default="false" />
  
    <!-- By default, we will load or override the robot_description -->
    <arg name="load_robot_description" default="true"/>
  
    <!-- Choose controller manager: fake, simple, or ros_control -->
    <arg name="moveit_controller_manager" default="fake" />
    <!-- Set execution mode for fake execution controllers -->
    <arg name="fake_execution_type" default="interpolate" />
  
    <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
    <arg name="use_gui" default="false" />
    <arg name="use_rviz" default="true" />
  
    <!-- If needed, broadcast static tf for robot root -->
  
    <group if="$(eval arg('moveit_controller_manager') == 'fake')">
      <!-- Commented out joint_state_publisher nodes
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
      </node>
      <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
      </node>
      -->
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
      </node>

      <!-- Given the published joint states, publish tf for the robot links -->
      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    </group>
  
    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(dirname)/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
      <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
      <arg name="info" value="true"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="pipeline" value="$(arg pipeline)"/>
      <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    </include>
  
    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(dirname)/moveit_rviz.launch" if="$(arg use_rviz)">
      <arg name="rviz_config" value="$(dirname)/moveit.rviz"/>
      <arg name="debug" value="$(arg debug)"/>
    </include>
  
    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(dirname)/default_warehouse_db.launch" if="$(arg db)">
      <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>
  
    <!-- Add custom node for FlySky using rosserial -->
    <node pkg="rosserial_python" type="serial_node.py" name="flysky_to_ros">
      <param name="port" value="/dev/ttyACM" />
      <param name="baud" value="115200" /> <!-- Ensure this matches your Arduino's baud rate -->
    </node>
  
  </launch>
  